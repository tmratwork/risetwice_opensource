// src/app/api/s1/session-messages/route.ts
// S1 Session Messages API - Save messages to Supabase (following V16 pattern)

import { NextRequest, NextResponse } from 'next/server';
import { supabaseAdmin } from '@/lib/supabase-admin';

export const dynamic = 'force-dynamic';

interface S1SessionMessageRequest {
  session_id: string;
  role: 'therapist' | 'ai_patient';
  content: string;
  emotional_tone?: string;
  therapist_user_id?: string;
}

export async function POST(request: NextRequest) {
  const requestId = Date.now().toString().slice(-6);
  const logPrefix = `[s1_message_persistence]`;

  console.log(`${logPrefix} Received S1 session message save request (${requestId})`);

  try {
    // Parse request body
    const body: S1SessionMessageRequest = await request.json();
    const { session_id, role, content, emotional_tone, therapist_user_id } = body;

    // Validate request
    if (!session_id || !role || !content) {
      console.error(`${logPrefix} Missing required parameters`);
      return NextResponse.json({ 
        error: 'Missing required fields: session_id, role, content' 
      }, { status: 400 });
    }

    console.log(`${logPrefix} Saving message from ${role} with content length: ${content.length}`);
    console.log(`${logPrefix} [CONTENT_DEBUG] Message content preview:`, content.substring(0, 100) + (content.length > 100 ? '...' : ''));

    // Get therapist user ID (following V16 pattern)
    // Use the therapist_user_id from request if provided, otherwise null for anonymous
    const therapistUserId = therapist_user_id || null;
    
    console.log(`${logPrefix} Therapist user ID:`, therapistUserId || 'anonymous');

    // Prepare message data for S1 table insertion (matching actual table schema)
    const messageData = {
      session_id,
      role,
      content,
      emotional_tone,
      message_type: 'text',
      timestamp_in_session: '00:00:01', // Default interval - will be calculated properly later
      is_final: true
      // Note: created_at is auto-generated by database
      // Note: metadata not in S1 schema, therapist_user_id will be tracked separately
    };

    console.log(`${logPrefix} [CONTENT_DEBUG] About to insert - full content:`, messageData.content);
    console.log(`${logPrefix} [CONTENT_DEBUG] About to insert - content length:`, messageData.content.length);

    // Insert message into S1 session messages table
    const { data: insertData, error: insertError } = await supabaseAdmin
      .from('s1_session_messages')
      .insert(messageData)
      .select();

    if (insertError) {
      console.error(`${logPrefix} Database insertion failed:`, insertError);
      
      // Provide specific error for foreign key constraint violation
      if (insertError.code === '23503' && insertError.message?.includes('session_id_fkey')) {
        return NextResponse.json({ 
          success: false,
          error: 'Session not found in database',
          details: `Session ID ${session_id} does not exist in s1_therapy_sessions table. Please ensure the session is properly created before saving messages.`,
          session_id: session_id
        }, { status: 404 });
      }
      
      return NextResponse.json({ 
        success: false,
        error: 'Failed to save message to database',
        details: insertError.message 
      }, { status: 500 });
    }

    const savedMessage = insertData?.[0];
    const databaseMessageId = savedMessage?.id;

    console.log(`${logPrefix} âœ… Successfully saved S1 session message:`, {
      databaseMessageId: databaseMessageId,
      sessionId: session_id,
      role: role,
      contentLength: content.length,
      insertedRecords: insertData?.length || 0
    });

    return NextResponse.json({ 
      success: true,
      message: 'S1 session message saved successfully',
      messageId: databaseMessageId,
      session_id: session_id
    });

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error(`${logPrefix} Save S1 session message failed:`, errorMessage);
    
    return NextResponse.json({ 
      success: false,
      error: 'Failed to save S1 session message',
      details: errorMessage
    }, { status: 500 });
  }
}