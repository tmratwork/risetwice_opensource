'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import '../../chatbotV11.css';

interface Book {
  id: string;
  title: string;
  author: string;
}

interface Quest {
  id: string;
  book_id: string;
  chapter_number: number;
  chapter_title: string;
  quest_title: string;
  introduction: string;
  challenge: string;
  reward: string;
  starting_question: string;
  ai_prompt?: string;
}

export default function EditQuestsPage() {
  const router = useRouter();
  const [books, setBooks] = useState<Book[]>([]);
  const [selectedBook, setSelectedBook] = useState<string>('');
  const [quests, setQuests] = useState<Quest[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  
  // Quest editing state
  const [editingQuest, setEditingQuest] = useState<Quest | null>(null);
  const [newQuest, setNewQuest] = useState<boolean>(false);

  // Fetch books and get the selected book ID from localStorage on component mount
  useEffect(() => {
    async function fetchBooksAndSetSelected() {
      try {
        // Get book ID from localStorage (set by nav bar)
        if (typeof window !== 'undefined') {
          // Get the user ID from the URL query parameters if present
          const urlParams = new URLSearchParams(window.location.search);
          const urlUserId = urlParams.get('userId');
          
          if (urlUserId) {
            // Store the user ID in localStorage for history button to use
            localStorage.setItem('userId', urlUserId);
          }
          
          const storedBookId = localStorage.getItem('selectedBookId');
          if (storedBookId) {
            setSelectedBook(storedBookId);
          }
        }
        
        // Fetch all books to get their titles
        const response = await fetch('/api/v11/books');
        if (!response.ok) {
          throw new Error('Failed to fetch books');
        }
        const data = await response.json();
        setBooks(data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to fetch books');
      }
    }

    fetchBooksAndSetSelected();
  }, []);

  // Fetch quests when selectedBook changes
  useEffect(() => {
    if (selectedBook) {
      fetchQuests(selectedBook);
    }
  }, [selectedBook]);

  // Function to fetch quests
  const fetchQuests = async (bookId: string) => {
    setLoading(true);
    setError(null);
    setSuccess(null);
    try {
      const response = await fetch(`/api/v11/quests?book_id=${bookId}`);
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to fetch quests (${response.status}): ${errorText}`);
      }

      const data = await response.json();
      setQuests(data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to fetch quests');
    } finally {
      setLoading(false);
    }
  };

  // Start editing a quest
  const startEditing = (quest: Quest) => {
    setEditingQuest({...quest});
    setNewQuest(false);
  };

  // Start creating a new quest
  const startNewQuest = () => {
    setEditingQuest({
      id: '', // Will be generated by the server
      book_id: selectedBook,
      chapter_number: 1,
      chapter_title: '',
      quest_title: '',
      introduction: '',
      challenge: '',
      reward: '',
      starting_question: '',
      ai_prompt: ''
    });
    setNewQuest(true);
  };

  // Cancel editing
  const cancelEditing = () => {
    setEditingQuest(null);
    setNewQuest(false);
  };

  // Handle form input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    if (!editingQuest) return;
    
    const { name, value } = e.target;
    
    // Handle number inputs separately
    if (name === 'chapter_number') {
      setEditingQuest({
        ...editingQuest,
        [name]: parseInt(value) || 0
      });
    } else {
      setEditingQuest({
        ...editingQuest,
        [name]: value
      });
    }
  };

  // Save quest (create new or update existing)
  const saveQuest = async () => {
    if (!editingQuest) return;
    
    setLoading(true);
    setError(null);
    setSuccess(null);
    
    try {
      // Validate required fields
      if (!editingQuest.quest_title || !editingQuest.introduction || 
          !editingQuest.challenge || !editingQuest.reward || 
          !editingQuest.starting_question || !editingQuest.chapter_title) {
        throw new Error('Please fill out all required fields');
      }
      
      // Different endpoints for create vs update
      const endpoint = newQuest 
        ? '/api/v11/quests/create' 
        : '/api/v11/quests/update';
      
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(editingQuest),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to save quest');
      }
      
      // Refresh the quests list
      fetchQuests(selectedBook);
      
      // Reset editing state
      setEditingQuest(null);
      setNewQuest(false);
      setSuccess(newQuest ? 'Quest created successfully' : 'Quest updated successfully');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to save quest');
    } finally {
      setLoading(false);
    }
  };

  // Delete a quest
  const deleteQuest = async (questId: string) => {
    if (!confirm('Are you sure you want to delete this quest? This action cannot be undone.')) {
      return;
    }
    
    setLoading(true);
    setError(null);
    setSuccess(null);
    
    try {
      const response = await fetch('/api/v11/quests/delete', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ id: questId }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to delete quest');
      }
      
      // Refresh the quests list
      fetchQuests(selectedBook);
      setSuccess('Quest deleted successfully');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to delete quest');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Edit Book Quests</h1>
        <div className="flex space-x-3">
          <button
            onClick={() => {
              if (typeof window !== 'undefined') {
                const storedUserId = localStorage.getItem('userId');
                if (storedUserId) {
                  window.open(`/chatbotV11/admin/history?userId=${encodeURIComponent(storedUserId)}&type=quest_generation`, '_blank');
                } else {
                  alert('Please go to the Admin page first and enter a User ID');
                }
              }
            }}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
          >
            View History
          </button>
          <button
            onClick={() => router.push('/chatbotV11/admin')}
            className="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700"
          >
            Back to Admin
          </button>
        </div>
      </div>

      {error && (
        <div className="mb-4 p-3 bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-400 rounded-md">
          {error}
        </div>
      )}

      {success && (
        <div className="mb-4 p-3 bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-400 rounded-md">
          {success}
        </div>
      )}

      {/* Book Info */}
      {selectedBook && books.length > 0 && (
        <div className="mb-6">
          <h2 className="text-lg font-medium mb-2">
            Selected Book: {books.find(b => b.id === selectedBook)?.title || 'Loading...'}
          </h2>
          <p className="text-sm text-gray-500">
            Editing quests for the book selected in the navigation bar
          </p>
        </div>
      )}
      
      {!selectedBook && (
        <div className="mb-6 p-4 bg-yellow-100 text-yellow-800 dark:bg-yellow-800/20 dark:text-yellow-400 rounded-md">
          No book selected. Please select a book from the navigation bar first.
        </div>
      )}

      {/* Add New Quest Button */}
      {selectedBook && !editingQuest && (
        <div className="mb-6">
          <button
            onClick={startNewQuest}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            disabled={loading}
          >
            Add New Quest
          </button>
        </div>
      )}

      {/* Quest Editor Form */}
      {editingQuest && (
        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 mb-8">
          <h2 className="text-xl font-bold mb-4">
            {newQuest ? 'Create New Quest' : 'Edit Quest'}
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label htmlFor="quest_title" className="block text-sm font-medium mb-1">
                Quest Title*
              </label>
              <input
                type="text"
                id="quest_title"
                name="quest_title"
                value={editingQuest.quest_title}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              />
            </div>
            
            <div>
              <label htmlFor="chapter_title" className="block text-sm font-medium mb-1">
                Chapter Title*
              </label>
              <input
                type="text"
                id="chapter_title"
                name="chapter_title"
                value={editingQuest.chapter_title}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              />
            </div>
            
            <div>
              <label htmlFor="chapter_number" className="block text-sm font-medium mb-1">
                Chapter Number*
              </label>
              <input
                type="number"
                id="chapter_number"
                name="chapter_number"
                value={editingQuest.chapter_number}
                onChange={handleInputChange}
                className="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                min="1"
                required
              />
            </div>
          </div>
          
          <div className="mb-4">
            <label htmlFor="introduction" className="block text-sm font-medium mb-1">
              Introduction*
            </label>
            <textarea
              id="introduction"
              name="introduction"
              value={editingQuest.introduction}
              onChange={handleInputChange}
              rows={3}
              className="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          
          <div className="mb-4">
            <label htmlFor="challenge" className="block text-sm font-medium mb-1">
              Challenge*
            </label>
            <textarea
              id="challenge"
              name="challenge"
              value={editingQuest.challenge}
              onChange={handleInputChange}
              rows={3}
              className="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          
          <div className="mb-4">
            <label htmlFor="reward" className="block text-sm font-medium mb-1">
              Reward*
            </label>
            <textarea
              id="reward"
              name="reward"
              value={editingQuest.reward}
              onChange={handleInputChange}
              rows={3}
              className="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          
          <div className="mb-4">
            <label htmlFor="starting_question" className="block text-sm font-medium mb-1">
              Starting Question*
            </label>
            <textarea
              id="starting_question"
              name="starting_question"
              value={editingQuest.starting_question}
              onChange={handleInputChange}
              rows={2}
              className="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          
          <div className="mb-6">
            <label htmlFor="ai_prompt" className="block text-sm font-medium mb-1">
              AI Prompt (Optional)
            </label>
            <textarea
              id="ai_prompt"
              name="ai_prompt"
              value={editingQuest.ai_prompt || ''}
              onChange={handleInputChange}
              rows={5}
              className="w-full px-4 py-2 border rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent font-mono text-sm"
              placeholder="Custom AI prompt instructions for this quest..."
            />
            <p className="mt-1 text-sm text-gray-500">
              Leave empty to use default AI behavior
            </p>
          </div>
          
          <div className="flex justify-end space-x-4">
            <button
              onClick={cancelEditing}
              className="px-4 py-2 border border-gray-300 rounded-md hover:bg-gray-100 dark:hover:bg-gray-700"
              disabled={loading}
            >
              Cancel
            </button>
            <button
              onClick={saveQuest}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
              disabled={loading}
            >
              {loading ? 'Saving...' : 'Save Quest'}
            </button>
          </div>
        </div>
      )}

      {/* Quests List */}
      {!editingQuest && (
        <div>
          <h2 className="text-xl font-bold mb-4">
            {selectedBook ? 'Quests' : 'Select a book to view quests'}
          </h2>
          
          {loading ? (
            <div className="flex justify-center py-8">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
            </div>
          ) : (
            selectedBook && quests.length === 0 ? (
              <div className="text-center py-8 text-gray-500">
                No quests available for this book
              </div>
            ) : (
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                  <thead className="bg-gray-50 dark:bg-gray-800">
                    <tr>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        Chapter
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        Quest Title
                      </th>
                      <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        Custom AI Prompt
                      </th>
                      <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        Actions
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-800">
                    {quests.map((quest) => (
                      <tr key={quest.id} className="hover:bg-gray-50 dark:hover:bg-gray-800">
                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                          <div className="font-medium">{quest.chapter_number}</div>
                          <div className="text-gray-500 dark:text-gray-400">{quest.chapter_title}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                          <div className="font-medium">{quest.quest_title}</div>
                          <div className="text-gray-500 dark:text-gray-400 truncate max-w-xs">
                            {quest.introduction.substring(0, 60)}...
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm">
                          {quest.ai_prompt ? (
                            <span className="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100">
                              Custom
                            </span>
                          ) : (
                            <span className="px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300">
                              Default
                            </span>
                          )}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <button
                            onClick={() => startEditing(quest)}
                            className="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 mr-4"
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => deleteQuest(quest.id)}
                            className="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300"
                          >
                            Delete
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )
          )}
        </div>
      )}
    </div>
  );
}